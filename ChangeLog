* 2.1.0 - Apr 12 2016
- Add "all" method that returns the list, so that projects which also use
IndexedRedis can have a type-agnostic interface for filtering (i.e. "all" will
always return items, and "filter" will always filter. On IndexedRedis,
"filter" updates/creates and returns a query, and values aren't returned until
"all" is called, but if you just always expect "all" to return values, you can
do that whether dealing with an IndexedRedisModel or QueryableList)

* 2.0.0 - Jan 25 2016
- Move constants to constants.py
- FIX: Missing QueryableListMixed in __all__ (for * import)
- FEATURE: Add QueryBuilder which allows building queries that can be applied on
multiple lists
- Update READMEs and documentation


* 1.2.1 - Jan 11 2016
- Support binary-logic operators ( &and, |or, ^xor) on QueryableLists

* 1.2.0 - Jan 11 2016
- Fixed issue with notcontainsAny
- Added new compare types that operate on lists stored as strings. All take a tuple, first argument is what to split by, second is what to match against (same type as the non-split equivalent comparison).
New filters are: splitcontains, splitnotcontains, splitcontainsAny, splitnotcontainsAny
- Fix the containsAny/notcontainsAny with a null value

* 1.1.0 - Jan 7 2016
- Implement inherited list methods which would return list, and make them return the same QueryableList type as the owning class
- Add the QueryableList name to __repr__, so it can be used to reconstruct / is visible
- Add __version__ and __version_tuple__ tags
- Remove one method of indirection in QueryableListObjs
- Implement subtraction for QueryableList (not present in list)
- Treat the lack of a field as None/null. This adds a slight overhead, but really simplifies filtering on multiple object types
- Speed up some access
- Add QueryableListMixed which is slightly slower, but supports both dict-like and object-like access. Use if you don't know in advance, or you need to support both in the same list.

* 1.0.0 - Jan 6 2016
- First Release

